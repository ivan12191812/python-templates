# Template para conexiones a bases de datos import sqlite3 import pymysql import psycopg2 from sqlalchemy import create_engine ''' Esta plantilla contiene funciones para conectar con diferentes bases de datos: - SQLite: Base de datos ligera basada en archivos - MySQL: Sistema de gestiÃ³n de bases de datos relacional popular - PostgreSQL: Sistema de bases de datos relacional avanzado - SQLAlchemy: ORM que soporta mÃºltiples motores de bases de datos ''' def connect_sqlite(db_file): """Conecta a una base de datos SQLite.""" try: conn = sqlite3.connect(db_file) return conn except sqlite3.Error as e: print(f"Error al conectar a SQLite: {e}") return None def connect_mysql(host, user, password, database, port=3306): """Conecta a una base de datos MySQL.""" try: conn = pymysql.connect( host=host, user=user, password=password, database=database, port=port ) return conn except pymysql.Error as e: print(f"Error al conectar a MySQL: {e}") return None def connect_postgresql(host, user, password, database, port=5432): """Conecta a una base de datos PostgreSQL.""" try: conn = psycopg2.connect( host=host, user=user, password=password, dbname=database, port=port ) return conn except psycopg2.Error as e: print(f"Error al conectar a PostgreSQL: {e}") return None def connect_sqlalchemy(dialect, driver, user, password, host, port, database): """Conecta usando SQLAlchemy. Dialectos comunes: sqlite, mysql, postgresql Drivers comunes: pymysql (MySQL), psycopg2 (PostgreSQL) Ejemplos de URI: - SQLite: 'sqlite:///database.db' - MySQL: 'mysql+pymysql://user:password@localhost:3306/dbname' - PostgreSQL: 'postgresql+psycopg2://user:password@localhost:5432/dbname' """ try: # Construir URI de conexiÃ³n if dialect.lower() == 'sqlite': uri = f"{dialect}:///{database}" else: uri = f"{dialect}+{driver}://{user}:{password}@{host}:{port}/{database}" engine = create_engine(uri) return engine except Exception as e: print(f"Error al crear conexiÃ³n SQLAlchemy: {e}") return None # FunciÃ³n para ejecutar consultas genÃ©ricas def execute_query(connection, query, params=None, fetch_all=True): """Ejecuta una consulta SQL en la conexiÃ³n proporcionada.""" try: with connection.cursor() as cursor: cursor.execute(query, params or ()) if query.strip().upper().startswith(('SELECT', 'SHOW')): if fetch_all: return cursor.fetchall() else: return cursor.fetchone() else: connection.commit() return cursor.rowcount except Exception as e: print(f"Error al ejecutar consulta: {e}") return None # Ejemplo de uso if __name__ == "__main__": # Ejemplo con SQLite sqlite_conn = connect_sqlite("ejemplo.db") if sqlite_conn: # Crear tabla execute_query(sqlite_conn, """ CREATE TABLE IF NOT EXISTS usuarios ( id INTEGER PRIMARY KEY, nombre TEXT NOT NULL, email TEXT UNIQUE ) """) # Insertar datos execute_query(sqlite_conn, """ INSERT INTO usuarios (nombre, email) VALUES (?, ?) """, ("Juan PÃ©rez", "juan@example.com")) # Consultar datos result = execute_query(sqlite_conn, "SELECT * FROM usuarios") print("Resultados:", result) # Cerrar conexiÃ³n sqlite_conn.close()